type Domain @entity {
  id: ID!               # The namehash of the name
  labelName: String     # The human readable label name (imported from CSV), if known
  labelhash: Bytes      # keccak256(labelName)
  parent: Domain        # The namehash (id) of the parent name
  subdomains: [Domain!]! @derivedFrom(field: "parent")  # Can count domains from length of array
  owner: Account!
  resolver: Resolver
  ttl: BigInt
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
  domainCount: Int!
}

enum AuctionState {
  AUCTION
  FINALIZED
  RELEASED
  FORBIDDEN
}

type AuctionedName @entity {
  id: ID!
  domain: Domain
  registrationDate: Int!
  releaseDate: Int
  winningBidder: Account
  maxBid: BigInt
  secondBid: BigInt
  bidCount: Int!
  state: AuctionState
}

type Resolver @entity {
  id: ID!
  domain: Domain!
  resolverEvents: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

interface ResolverEvent {
  id: ID!                   # Count events in order - 0,1,2,3 etc
  node: Bytes!
  resolver: Bytes!          # Address of the resolver that emitted the event
}

# Used for ResolverEvent IDs
type ResolverEventCount @entity {
  id: ID!                   # Just "1"
  count: BigInt!
}

type AddrChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  address: Bytes!
}

type NameChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  name: String!
}

type AbiChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  contentType: BigInt!
}

type PubkeyChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  x: Bytes!
  y: Bytes!
}

type TextChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  indexedKey: String!
  key: String!
}

type ContenthashChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  hash: Bytes!
}

type InterfaceChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  interfaceID: Bytes!
  implementer: Bytes!
}

type AuthorisationChanged implements ResolverEvent @entity {
  id: ID!
  resolver: Bytes!
  node: Bytes!
  owner: Bytes!
  target: Bytes!
  isAuthorized: Boolean!
}
