type Domain @entity {
  id: ID!               # The namehash of the name
  name: String          # The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  labelName: String     # The human readable label name (imported from CSV), if known
  labelhash: Bytes      # keccak256(labelName)
  parent: Domain        # The namehash (id) of the parent name
  subdomains: [Domain!]! @derivedFrom(field: "parent")  # Can count domains from length of array
  owner: Account!
  resolver: Resolver
  ttl: BigInt
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
  deeds: [Deed!]! @derivedFrom(field: "owner")
}

enum AuctionState {
  AUCTION
  FINALIZED
  RELEASED
  FORBIDDEN
}

type Deed @entity {
  id: ID!
  owner: Account!
  value: BigInt!
  name: AuctionedName @derivedFrom(field: "deed")
}

type AuctionedName @entity {
  id: ID!
  domain: Domain
  registrationDate: Int!
  releaseDate: Int
  deed: Deed
  secondBid: BigInt
  bidCount: Int!
  state: AuctionState!
}

type Resolver @entity {
  id: ID!                   # Concatenation of resolver address and namehash
  domain: Domain!
  address: Bytes!           # Address of resolver contract

  addr: Account             # Current value of addr record (per events)
  resolverEvents: [ResolverEvent!]! @derivedFrom(field: "resolverID")
}

interface ResolverEvent {
  id: ID!                   # Concatenation of block number and log ID
  node: Bytes!
  resolver: Resolver!     # Used to derive relationships to Resolvers
}

type AddrChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  a: Account!
}

type NameChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  name: String!
}

type AbiChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  contentType: BigInt!
}

type PubkeyChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  x: Bytes!
  y: Bytes!
}

# Currently not in use - follow this issue for status - https://github.com/graphprotocol/graph-node/issues/913
#type TextChanged implements ResolverEvent @entity {
#  id: ID!
#  node: Bytes!
#  resolver: String!
#  indexedKey: String!
#  key: String!
#}

type ContenthashChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  hash: Bytes!
}

type InterfaceChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  interfaceID: Bytes!
  implementer: Bytes!
}

type AuthorisationChanged implements ResolverEvent @entity {
  id: ID!
  node: Bytes!
  resolver: Resolver!
  owner: Bytes!
  target: Bytes!
  isAuthorized: Boolean!
}
